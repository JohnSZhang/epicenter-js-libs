{"version":3,"file":"epicenter.min.js","sources":["../src/util/query-util.js","../src/util/run-util.js","../src/service/url-config-service.js","../src/service/configuration-service.js","../src/transport/ajax-http-transport.js","../src/transport/http-transport-factory.js","../src/store/cookie-store.js","../src/store/store-factory.js","../src/service/data-api-service.js","../src/service/auth-api-service.js","../src/service/variables-api-service.js","../src/service/run-api-service.js"],"names":["query","toMatrixFormat","qs","undefined","String","returnArray","OPERATORS","$","each","key","value","inArray","trim","charAt","push","mtrx","join","toQueryFormat","isArray","isPlainObject","JSON","stringify","result","qsToObject","qsArray","split","returnObj","index","qKey","qVal","indexOf","mergeQS","qs1","qs2","obj1","this","obj2","extend","window","F","util","root","run","normalizeOperations","operations","args","returnList","ops","_normalizePlainObjects","opn","arg","concat","_normalizeStructuredObjects","operation","name","params","_normalizeObject","_normalizeLiterals","_normalizeArrays","exports","module","call","URLService","config","API_PROTOCOL","HOST_API_MAPPING","forio.com","foriodev.com","getAPIPath","api","PROJECT_APIS","apiPath","protocol","host","accountPath","projectPath","publicExports","location","accnt","path","pathname","prj","service","URL","urlService","require","ConfigurationService","defaults","logLevel","serviceOptions","server","data","setEnv","get","property","set","Config","qutils","AjaxHTTP","ajaxOptions","d","isFunction","url","contentType","headers","statusCode",404,"noop","parameterParser","transportOptions","connect","method","connectOptions","options","type","ALLOWED_TO_BE_FUNCTIONS","console","log","oldSuccessFn","success","response","apply","arguments","ajax","publicAPI","basePath","statusHandlers","post","slice","patch","put","delete","delimiter","head","transport","Ajax","isNode","HTTPService","factory","Transport","ConfigService","configService","jQuery","CookieStore","domain","setOptions","document","cookie","encodeURIComponent","cookieReg","RegExp","replace","val","decodeURIComponent","remove","remOptions","destroy","aKeys","nIdx","length","cookieKey","store","Cookie","dataStore","Store","qutil","TransportFactory","StorageFactory","DataService","synchronous","token","apiKey","urlConfig","account","project","getURL","httpOptions","Authorization","http","limiters","q","save","attrs","saveAs","load","filters","keys","id","Data","AuthService","userName","password","EPI_COOKIE_KEY","login","Error","access_token","logout","username","getToken","$d","Deferred","resolve","then","promise","Auth","rutil","futil","VariablesService","runService","getFilterURL","variable","include","Variables","RunService","filter","error","complete","progress","setFilterOrThrowError","publicAsyncAPI","create","createOptions","model","oldSuccess","outputModifier","runID","attributes","do","opsArgs","postOptions","prms","serial","opParams","me","doSingleOp","op","shift","reject","parallel","queue","i","when","done","fail","publicSyncAPI","variables","vs","Run"],"mappings":"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","sourcesContent":["/**\n * Utilities for working with query strings\n*/\nvar query= function () {\n\n    return {\n        /**\n         * Converts to matrix format\n         * @param  {Object} qs Object to convert to query string\n         * @return {String}    Matrix-format query parameters\n         */\n        toMatrixFormat: function(qs) {\n            if (qs === null || qs === undefined || qs === '') return ';';\n            if (typeof qs === 'string' || qs instanceof String) return qs;\n\n            var returnArray = [];\n            var OPERATORS = ['<', '>', '!'];\n            $.each(qs, function(key, value) {\n                if (typeof value !== 'string' || $.inArray($.trim(value).charAt(0), OPERATORS) === -1)\n                    value = '=' + value;\n                returnArray.push(key + value);\n            });\n\n            var mtrx = ';' + returnArray.join(';');\n            return mtrx;\n        },\n\n        toQueryFormat: function(qs) {\n            if (qs === null || qs === undefined) return '';\n            if (typeof qs === 'string' || qs instanceof String) return qs;\n\n            var returnArray = [];\n            $.each(qs, function(key, value) {\n                if ($.isArray(value)) {\n                    value = value.join(',');\n                }\n                if ($.isPlainObject(value)) {\n                    //Mostly for data api\n                    value = JSON.stringify(value);\n                }\n                returnArray.push(key + '=' + value);\n            });\n\n            var result = returnArray.join('&');\n            return result;\n        },\n\n        qsToObject: function(qs) {\n            if (qs === null || qs === undefined || qs === '') return {};\n\n            var qsArray = qs.split('&');\n            var returnObj = {};\n            $.each(qsArray, function(index, value) {\n                var qKey = value.split('=')[0];\n                var qVal = value.split('=')[1];\n\n                if (qVal.indexOf(',') !== -1) {\n                    qVal = qVal.split(',');\n                }\n\n                returnObj[qKey] = qVal;\n            });\n\n            return returnObj;\n        },\n\n        mergeQS: function(qs1, qs2) {\n            var obj1 = this.qsToObject(this.toQueryFormat(qs1));\n            var obj2 = this.qsToObject(this.toQueryFormat(qs2));\n            return $.extend(true, {}, obj1, obj2);\n        }\n    };\n}();\n\nif (!window.F) window.F = {};\nif (!window.F.util) window.F.util = {};\nF.util.query = query;\n","/**\n * Utilities for working with the run service\n*/\n(function(){\nvar root = this;\n\nvar run= function () {\n\n    return {\n        /**\n         * returns operations of the form [[op1,op2], [arg1, arg2]]\n         * @param  {Object|Array|String} operations operations to perform\n         * @param  {Array} arugments for operation\n         * @return {String}    Matrix-format query parameters\n         */\n        normalizeOperations: function(operations, args) {\n            if (!args) args = [];\n            var returnList = {\n                ops: [],\n                args: []\n            };\n\n            //{add: [1,2], subtract: [2,4]}\n            var _normalizePlainObjects = function(operations, returnList) {\n                if (!returnList) returnList = {ops: [], args: []};\n                $.each(operations, function(opn, arg) {\n                    returnList.ops.push(opn);\n                    returnList.args.push([].concat(arg));\n                });\n                return returnList;\n            };\n            //{name: 'add', params: [1]}\n            var _normalizeStructuredObjects = function(operation, returnList) {\n                if (!returnList) returnList = {ops: [], args: []};\n                returnList.ops.push(operation.name);\n                returnList.args.push([].concat(operation.params));\n                return returnList;\n            };\n\n            var _normalizeObject = function(operation, returnList) {\n                return ((operation.name) ? _normalizeStructuredObjects : _normalizePlainObjects)(operation, returnList);\n            };\n\n            var _normalizeLiterals = function(operation, args, returnList) {\n                if (!returnList) returnList = {ops: [], args: []};\n                returnList.ops.push(operation);\n                returnList.args.push([].concat(args));\n                return returnList;\n            };\n\n\n            var _normalizeArrays = function(operations, arg, returnList) {\n                if (!returnList) returnList = {ops: [], args: []};\n                $.each(operations, function(index, opn) {\n                    if ($.isPlainObject(opn)) {\n                        _normalizeObject(opn, returnList);\n                    }\n                    else {\n                        _normalizeLiterals(opn, args[index], returnList);\n                    }\n                });\n                return returnList;\n            };\n\n            if ($.isPlainObject(operations)) {\n                _normalizeObject(operations, returnList);\n            }\n            else if($.isArray(operations)) {\n               _normalizeArrays(operations, args, returnList);\n            }\n            else {\n                _normalizeLiterals(operations, args, returnList);\n            }\n\n            return returnList;\n        }\n    };\n}();\n\n\nif (typeof exports !== 'undefined') {\n    module.exports = run;\n}\nelse {\n    if (!root.F) { root.F = {};}\n    if (!root.F.util) { root.F.util = {};}\n    root.F.util.run = run;\n}\n\n}).call(this);\n","(function(){\nvar root = this;\n\nvar URLService= function (config) {\n    //TODO: urlutils to get host, since no window on node\n\n    var API_PROTOCOL = 'https';\n    var HOST_API_MAPPING = {\n        'forio.com': 'api.forio.com',\n        'foriodev.com': 'api.epicenter.foriodev.com'\n    };\n\n    var getAPIPath = function(api) {\n        var PROJECT_APIS = ['run', 'data'];\n        var apiPath = this.protocol + '://' + this.host + '/' + api + '/';\n\n        if ($.inArray(api, PROJECT_APIS) !== -1) {\n            apiPath += this.accountPath + '/' + this.projectPath  + '/';\n        }\n        return apiPath;\n    };\n    var publicExports = {\n        protocol: API_PROTOCOL,\n\n        api: '',\n\n        host: (function() {\n            host = window.location.host;\n            if (!host || host.indexOf('localhost') !== -1) host = 'forio.com';\n            return (HOST_API_MAPPING[host]) ? HOST_API_MAPPING[host] : 'api.' + host;\n        }()),\n\n        accountPath: (function () {\n            var accnt = 'test';\n            var path = window.location.pathname.split('\\/');\n            if (path && path[1] === 'app') {\n                accnt = path[2];\n            }\n            return accnt;\n        }()),\n\n        projectPath: (function () {\n            var prj = 'test';\n            var path = window.location.pathname.split('\\/');\n            if (path && path[1] === 'app') {\n                prj = path[3];\n            }\n            return prj;\n        }()),\n\n        getAPIPath: getAPIPath\n    };\n    publicExports.apiPath = getAPIPath(publicExports.api);\n\n    $.extend(publicExports, config);\n    return publicExports;\n};\n\nif (typeof exports !== 'undefined') {\n    module.exports = URLService;\n}\nelse {\n    if (!root.F) { root.F = {};}\n    if (!root.F.service) { root.F.service = {};}\n    root.F.service.URL = URLService;\n}\n\n}).call(this);\n","/**\n * @class ConfigurationService\n *\n * All services take in a configuration settings object to configure themselves. A JS hash {} is a valid configuration object, but optionally you can use the configuration service to toggle configs based on the environment\n *\n * @example\n *     var cs = require('configuration-service')({\n *          dev: { //environment\n                port: 3000,\n                host: 'localhost',\n            },\n            prod: {\n                port: 8080,\n                host: 'api.forio.com',\n                logLevel: 'none'\n            },\n            logLevel: 'DEBUG' //global\n *     });\n *\n *      cs.get('logLevel'); //returns 'DEBUG'\n *\n *      cs.setEnv('dev');\n *      cs.get('logLevel'); //returns 'DEBUG'\n *\n *      cs.setEnv('prod');\n *      cs.get('logLevel'); //returns 'none'\n *\n */\n\n(function(){\n var root = this;\n var F = root.F;\n\n\n var urlService;\n if  (typeof require !== 'undefined') {\n     urlService = require('service/urlService');\n }\n else {\n     urlService = F.service.URL;\n }\n\nvar ConfigurationService = function (config) {\n\n    //TODO: Environments\n    var defaults = {\n        logLevel: 'NONE'\n    };\n    var serviceOptions = $.extend({}, defaults, config);\n    serviceOptions.server = urlService(serviceOptions.server);\n\n    return {\n\n        data: serviceOptions,\n\n        /**\n         * Set the environment key to get configuration options from\n         * @param {String} env\n         */\n        setEnv: function (env) {\n\n        },\n\n        /**\n         * Get configuration.\n         * @param  {String} property optional\n         * @return {*}          Value of property if specified, the entire config object otherwise\n         */\n        get: function (property) {\n            return serviceOptions[property];\n        },\n\n        /**\n         * Set configuration.\n         * @param  {String|Object} key if a key is provided, set a key to that value. Otherwise merge object with current config\n         * @param  {*} value  value for provided key\n         */\n        set: function (key, value) {\n            serviceOptions[key] = value;\n        }\n    };\n};\n\nif (typeof exports !== 'undefined') {\n    module.exports = ConfigurationService;\n}\nelse {\n    if (!root.F) { root.F = {};}\n    if (!root.F.service) { root.F.service = {};}\n    root.F.service.Config = ConfigurationService;\n}\n\n}).call(this);\n\n","(function(){\nvar root = this;\nvar F = root.F;\nvar qutils = F.util.query;\n\nvar AjaxHTTP= function (ajaxOptions) {\n\n    var result = function(d) {\n        return ($.isFunction(d)) ? d() : d;\n    };\n\n    var defaults = {\n        url: '',\n\n        contentType: 'application/json',\n        headers: {},\n        statusCode: {\n            404: $.noop\n        },\n        parameterParser: qutils.toQueryFormat\n    };\n\n    //TODO: Add config service to switch between locations by url\n    var transportOptions = $.extend({}, defaults, ajaxOptions);\n\n    var connect = function (method, params, connectOptions) {\n        params = result(params);\n        params = ($.isPlainObject(params) || $.isArray(params)) ? JSON.stringify(params) : params;\n\n        var options = $.extend(true, {}, transportOptions, connectOptions, {\n            type: method,\n            data: params\n        });\n        var ALLOWED_TO_BE_FUNCTIONS = ['data', 'url'];\n        $.each(options, function(key, value) {\n            if ($.isFunction(value) && $.inArray(key, ALLOWED_TO_BE_FUNCTIONS) !== -1) {\n                options[key] = value();\n            }\n        });\n\n        if (options.logLevel && options.logLevel === 'DEBUG' ) {\n            console.log(options.url);\n            var oldSuccessFn = options.success || $.noop;\n            options.success = function(response, ajaxStatus, ajaxReq) {\n                console.log(response);\n                oldSuccessFn.apply(this, arguments);\n            };\n        }\n        return $.ajax(options);\n    };\n\n    var publicAPI = {\n        /** All method paths will be relative to this **/\n        basePath: '',\n\n        statusHandlers: {\n\n        },\n\n        get:function (params, ajaxOptions) {\n            var options = $.extend({}, transportOptions, ajaxOptions);\n            params = options.parameterParser(result(params));\n            return connect.call(this, 'GET', params, options);\n        },\n        post: function () {\n            return connect.apply(this, ['post'].concat([].slice.call(arguments)));\n        },\n        patch: function () {\n            return connect.apply(this, ['patch'].concat([].slice.call(arguments)));\n        },\n        put: function () {\n            return connect.apply(this, ['put'].concat([].slice.call(arguments)));\n        },\n        delete: function (params, ajaxOptions) {\n            var options = $.extend({}, transportOptions, ajaxOptions);\n            params = options.parameterParser(result(params));\n            if ($.trim(params)) {\n                var delimiter = (result(options.url).indexOf('?') === -1) ? '?' : '&';\n                options.url = result(options.url) + delimiter + params;\n            }\n            return connect.call(this, 'DELETE', null, options);\n        },\n        head: function () {\n            return connect.apply(this, ['head'].concat([].slice.call(arguments)));\n        },\n        options: function () {\n            return connect.apply(this, ['options'].concat([].slice.call(arguments)));\n        }\n    };\n\n    return $.extend(this, publicAPI);\n};\n\nif (typeof exports !== 'undefined') {\n    module.exports = AjaxHTTP;\n}\nelse {\n    if (!root.F) { root.F = {};}\n    if (!root.F.transport) { root.F.transport = {};}\n    root.F.transport.Ajax = AjaxHTTP;\n}\n\n}).call(this);\n","(function(){\nvar root = this;\nvar F = root.F;\n\nvar transport;\nvar isNode = false;\nif (typeof require !== 'undefined') {\n    transport =  (isNode) ? require('transport/node-http-transport') : require('transport/ajax-http-transport');\n}\nelse {\n    transport =  F.transport.Ajax;\n}\n\nif (typeof exports !== 'undefined') {\n    module.exports = HTTPService;\n}\nelse {\n    if (!root.F) { root.F = {};}\n    if (!root.F.factory) { root.F.factory = {};}\n    root.F.factory.Transport = transport;\n}\n\n}).call(this);\n","/**\n * @class Cookie Storage Service\n *\n * @example\n *      var people = require('cookie-store')({root: 'people'});\n        people\n            .save({lastName: 'smith'})\n\n */\n\n(function() {\nvar root = this;\nvar F = root.F;\nvar $, ConfigService;\nif (typeof require !== 'undefined') {\n    $ = require('jquery');\n    configService = require('util/configuration-service');\n} else {\n    $ = jQuery;\n    ConfigService = F.service.Config;\n}\n\nvar CookieStore = function (config) {\n\n    var defaults = {\n        /**\n         * Name of collection\n         * @type {String}\n         */\n        root: '/',\n\n        domain: '.forio.com'\n    };\n    var serviceOptions = $.extend({}, defaults, config);\n\n    var publicAPI = {\n        // * TBD\n        //  * Query collection; uses MongoDB syntax\n        //  * @see  <TBD: Data API URL>\n        //  *\n        //  * @param {String} qs Query Filter\n        //  * @param {String} limiters @see <TBD: url for limits, paging etc>\n        //  *\n        //  * @example\n        //  *     cs.query(\n        //  *      {name: 'John', className: 'CSC101'},\n        //  *      {limit: 10}\n        //  *     )\n\n        // query: function (qs, limiters) {\n\n        // },\n\n        /**\n         * Save cookie value\n         * @param  {String|Object} key   If given a key save values under it, if given an object directly, save to top-level api\n         * @param  {Object} value (Optional)\n         * @param {Object} options Overrides for service options\n         *\n         * @return {*} The saved value\n         *\n         * @example\n         *     cs.set('person', {firstName: 'john', lastName: 'smith'});\n         *     cs.set({name:'smith', age:'32'});\n         */\n        set: function (key, value, options) {\n            var setOptions = $.extend(true, {}, serviceOptions, options);\n\n            var domain = setOptions.domain;\n            var path = setOptions.root;\n\n            document.cookie = encodeURIComponent(key) + '=' +\n                                encodeURIComponent(value) +\n                                (domain ? '; domain=' + domain : '') +\n                                (path ? '; path=' + path : '');\n\n            return value;\n        },\n\n        /**\n         * Load cookie value\n         * @param  {String|Object} key   If given a key save values under it, if given an object directly, save to top-level api\n         * @return {*} The value stored\n         *\n         * @example\n         *     cs.get('person');\n         */\n        get: function(key) {\n            var cookieReg = new RegExp('(?:(?:^|.*;)\\\\s*' + encodeURIComponent(key).replace(/[\\-\\.\\+\\*]/g, '\\\\$&') + '\\\\s*\\\\=\\\\s*([^;]*).*$)|^.*$');\n            var val = document.cookie.replace(cookieReg, '$1');\n            val = decodeURIComponent(val) || null;\n            return val;\n        },\n\n        /**\n         * Removes key from collection\n         * @param {String} key key to remove\n         * @return {String} key The key removed\n         *\n         * @example\n         *     cs.remove('person');\n         */\n        remove: function (key, options) {\n            var remOptions = $.extend(true, {}, serviceOptions, options);\n\n            var domain = remOptions.domain;\n            var path = remOptions.root;\n\n            document.cookie = encodeURIComponent(key) +\n                            '=; expires=Thu, 01 Jan 1970 00:00:00 GMT' +\n                            ( domain ? '; domain=' + domain : '') +\n                            ( path ? '; path=' + path : '');\n            return key;\n        },\n\n        /**\n         * Removes collection being referenced\n         * @return {Array} keys All the keys removed\n         */\n        destroy: function () {\n            var aKeys = document.cookie.replace(/((?:^|\\s*;)[^\\=]+)(?=;|$)|^\\s*|\\s*(?:\\=[^;]*)?(?:\\1|$)/g, '').split(/\\s*(?:\\=[^;]*)?;\\s*/);\n            for (var nIdx = 0; nIdx < aKeys.length; nIdx++) {\n                var cookieKey = decodeURIComponent(aKeys[nIdx]);\n                this.remove(cookieKey);\n            }\n            return aKeys;\n        }\n    };\n\n    $.extend(this, publicAPI);\n};\n\n\nif (typeof exports !== 'undefined') {\n    module.exports = CookieStore;\n}\nelse {\n    if (!root.F) { root.F = {};}\n    if (!root.F.store) { root.F.store = {};}\n    root.F.store.Cookie = CookieStore;\n}\n\n}).call(this);\n\n","/**\n    Decides type of store to provide\n*/\n\n(function(storeType){\nvar root = this;\nvar F = root.F;\n\nvar dataStore;\nvar isNode = false;\nif (typeof require !== 'undefined') {\n    dataStore =  (isNode) ? require('./session-store.js') : require('./cookie-store.js');\n}\nelse {\n    dataStore =  F.store.Cookie;\n}\n\nif (typeof exports !== 'undefined') {\n    module.exports = dataStore;\n}\nelse {\n    if (!root.F) { root.F = {};}\n    if (!root.F.factory) { root.F.factory = {};}\n    root.F.factory.Store = dataStore;\n}\n\n}).call(this);\n","/**\n * ##Data API Service\n *\n * The Data API Service allows you to create, access, and manipulate data related to any of your projects. Data are organized in collections. Each collection contains a document; each element of this top-level document is a JSON object. (See additional information on the underlying [Data API](../../data_api/).)\n *\n * All API calls take in an \"options\" object as the last parameter. The options can be used to extend/override the Data API Service defaults. In particular, the `root` option contains the name of the collection. If you have multiple collections within each of your projects, you can pass the collection name as an option for each call.\n *\n * @example\n *      var people = require('data-service')({root: 'people'});\n *       people\n *          .query({firstName: 'john'})\n *          .save({lastName: 'smith'})\n *          .done(function(data) {\n *             console.log('Queried and saved!')\n *           });\n *\n */\n\n(function() {\nvar root = this;\nvar F = root.F;\nvar $, ConfigService, qutil, TransportFactory, StorageFactory;\nif (typeof require !== 'undefined') {\n    $ = require('jquery');\n    configService = require('util/configuration-service');\n    qutil = require('util/query-util');\n    StorageFactory= require('store/store-factory');\n} else {\n    $ = jQuery;\n    ConfigService = F.service.Config;\n    qutil = F.util.query;\n    TransportFactory = F.factory.Transport;\n    StorageFactory = F.factory.Store;\n}\n\nvar DataService = function (config) {\n\n    var store = new StorageFactory({synchronous: true});\n\n    var defaults = {\n        /**\n         * Name of collection. Defaults to `/`, that is, the root level of your project at `forio.com/app/your-account-id/your-project-id/`.\n         * @type {String}\n         */\n        root: '/',\n\n        /**\n         * For operations which require authentication, pass in the user access token. Defaults to empty string.\n         * @see [Authentication API Service](./auth-api-service.html) for getting tokens.\n         * @type {String}\n         */\n        token: store.get('epicenter.token') || '',\n\n        apiKey: '',\n        domain: 'forio.com'\n    };\n    var serviceOptions = $.extend({}, defaults, config);\n\n    var urlConfig = ConfigService(serviceOptions).get('server');\n    if (serviceOptions.account) urlConfig.accountPath = serviceOptions.account;\n    if (serviceOptions.project) urlConfig.projectPath = serviceOptions.project;\n\n    var getURL = function(key) {\n        var url = urlConfig.getAPIPath('data') + serviceOptions.root + '/';\n        if (key) url+= key + '/';\n        return url;\n    };\n\n    var httpOptions = {\n        url: getURL\n    };\n    if (serviceOptions.token) {\n        httpOptions.headers = {\n            'Authorization': 'Bearer ' + serviceOptions.token\n        };\n    }\n    var http = new TransportFactory(httpOptions);\n\n    var publicAPI = {\n\n        /**\n         * Query collection; uses MongoDB syntax\n         * @see the underlying [Data API](../../data_api/#get-reading-data) for additional details.\n         *\n         * @param {String} Object Query Filter\n         * @param {String} limiters @see <TBD: url for limits, paging etc>\n         * @param {Object} options Overrides for configuration options\n         *\n         * @example\n         *     ds.query(\n         *      {name: 'John', className: 'CSC101'},\n         *      {limit: 10}\n         *     )\n         */\n        query: function (key, query, limiters, options) {\n            var params = $.extend(true, {q: query}, limiters);\n            var httpOptions = $.extend(true, {}, serviceOptions, options, {url: getURL(key)});\n            return http.get(params, httpOptions);\n        },\n\n        /**\n         * Save data to an anonymous set\n         *\n         * **Example**\n         *\n         *     ds.save({name:'smith', age:'32'});\n         *\n         * **Parameters**\n         *\n         * @param {String|Object} `key` If `key` is a string, it is the id of the element to create or update in this collection. Document ids must be unique within this account (team or personal account) and project. If `key` is an object, the object is the data to save in a new document (top-level element) in this collection, and the id for the element is generated automatically.\n         * @param {Object} `value` (Optional) If `key` is a string, this object is the data to save.\n         * @param {object} `options` (Optional) Overrides for configuration options.\n         */\n        save: function (key, value, options) {\n            var attrs;\n            if (typeof key === 'object') {\n              attrs = key;\n              options = value;\n            } else {\n              (attrs = {})[key] = value;\n            }\n            var httpOptions = $.extend(true, {}, serviceOptions, options);\n            return http.post(attrs, httpOptions);\n        },\n\n        /**\n         * Save data to a named set\n         *\n         * **Example**\n         *\n         *     ds.saveAs('person', {firstName: 'john', lastName: 'smith'});\n         *\n         * **Parameters**\n         *\n         * @param {String} name of the set\n         * @param {Object} `value` (Optional) contents of the set\n         * @param {object} `options` (Optional) Overrides for configuration options.\n         */\n        saveAs: function (key, value, options) {\n            var httpOptions = $.extend(true, {}, serviceOptions, options, {url: getURL(key)});\n            return http.put(value, httpOptions);\n        },\n\n        /**\n         * Load value\n         * @param  {String|Object} key   If given a key save values under it, if given an object directly, save to top-level api\n         * @param {Object} filters filters & op modifiers\n         * @param {Object} options Overrides for configuration options\n         *\n         * @example\n         *     ds.load('person');\n         */\n        load: function (key, filters, options) {\n            var httpOptions = $.extend(true, {}, serviceOptions, options, {url: getURL(key)});\n            return http.get(filters, httpOptions);\n        },\n\n        /**\n         * Removes data from collection. Only documents (top-level elements in each collection) can be deleted.\n         *\n         * **Example**\n         *\n         *     ds.remove('person');\n         *\n         * **Parameters**\n         *\n         * @param {String} `key` The id of the document to remove from this collection.\n         * @param {object} `options` (Optional) Overrides for configuration options.\n         */\n        remove: function (keys, options) {\n            var httpOptions = $.extend(true, {}, serviceOptions, options);\n            var params;\n            if ($.isArray(keys)) {\n                params = {id: keys};\n            }\n            else {\n                params = '';\n                httpOptions.url = getURL(keys);\n            }\n            return http.delete(params, httpOptions);\n        }\n\n        // Epicenter doesn't allow nuking collections\n        //     /**\n        //      * Removes collection being referenced\n        //      * @return null\n        //      */\n        //     destroy: function (options) {\n        //         return this.remove('', options);\n        //     }\n    };\n\n    $.extend(this, publicAPI);\n};\n\n\nif (typeof exports !== 'undefined') {\n    module.exports = DataService;\n}\nelse {\n    if (!root.F) { root.F = {};}\n    if (!root.F.service) { root.F.service = {};}\n    root.F.service.Data = DataService;\n}\n\n}).call(this);\n\n","/**\n *\n * ##Authentication API Service\n *\n * The Authentication API Service provides methods for logging in and creating user access tokens.\n * User access tokens are required for each call to Epicenter. (See [Creating access tokens](../../project_access/) for more information.)\n *\n * @example\n *      var auth = require('authentication-service')();\n *      auth.login()\n */\n\n(function() {\nvar root = this;\nvar F = root.F;\nvar $, ConfigService, qutil, TransportFactory, StorageFactory;\nif (typeof require !== 'undefined') {\n    $ = require('jquery');\n    configService = require('util/configuration-service');\n    qutil = require('util/query-util');\n    StorageFactory = require('store/store-factory');\n} else {\n    $ = jQuery;\n    ConfigService = F.service.Config;\n    qutil = F.util.query;\n    TransportFactory = F.factory.Transport;\n    StorageFactory= F.factory.Store;\n}\n\n\nvar AuthService = function (config) {\n\n    var defaults = {\n        /**\n         * Where to store user access tokens for temporary access. Defaults to storing in a cookie in the browser.\n         * @type {String}\n         */\n        store: {synchronous: true},\n\n        /**\n         * User name to use for loggin in\n         * @type {String}\n         */\n        userName: '',\n\n        /**\n         * Password for specified user name\n         * @type {String}\n         */\n        password: ''\n\n    };\n    var serviceOptions = $.extend({}, defaults, config);\n\n    var urlConfig = ConfigService(serviceOptions).get('server');\n    var http = new TransportFactory({\n        url: urlConfig.getAPIPath('authentication')\n    });\n\n    var EPI_COOKIE_KEY = 'epicenter.token';\n    var store = new StorageFactory(serviceOptions.store);\n    var token = store.get(EPI_COOKIE_KEY) || '';\n\n    var publicAPI = {\n        store: store,\n\n        /**\n         * Logs user in to specified account. If no username or password was provided in the intial configuration options, they're mandatory here\n         *\n         * **Example**\n         *\n         *      auth.login({userName: 'jsmith@acmesimulations.com', password: 'passw0rd'});\n         *\n         * **Parameters**\n         * @param {Object} `options` (Optional) Overrides for configuration options\n         */\n        login: function (options) {\n            var httpOptions = $.extend(true, {success: $.noop}, serviceOptions, options);\n            if (!httpOptions.userName || !httpOptions.password) {\n                throw new Error('No username or password specified.');\n            }\n\n            var oldSuccessFn = httpOptions.success;\n            httpOptions.success = function(response) {\n                serviceOptions.password = httpOptions.password;\n                serviceOptions.userName = httpOptions.userName;\n\n                token = response.access_token;\n                store.set(EPI_COOKIE_KEY, token);\n\n                oldSuccessFn.apply(this, arguments);\n            };\n\n            return http.post({userName: httpOptions.userName, password: httpOptions.password}, httpOptions);\n        },\n\n        /**\n         * Logs user out from specified accounts.\n         *\n         * **Example**\n         *\n         *      auth.logout();\n         *\n         * **Parameters**\n         * @param {String} `username` (Optional) If provided only logs specific username out, otherwise logs out all usernames associated with session\n         * @param {Object} `options` (Optional) Overrides for configuration options\n         */\n        logout: function (username, options) {\n            return store.remove(EPI_COOKIE_KEY, options);\n        },\n\n        /**\n         * Returns existing user access token if already logged in, or creates a new one otherwise.\n         *\n         * **Example**\n         *\n         *      var currToken = auth.getToken();\n         *\n         * **Parameters**\n         * @param {Object} `options` (Optional) Overrides for configuration options\n         */\n        getToken: function (options) {\n            var httpOptions = $.extend(true, {success: $.noop}, serviceOptions, options);\n\n            var $d = $.Deferred();\n            if (token) {\n                $d.resolve(token);\n            }\n            else {\n                this.login(httpOptions).then($d.resolve);\n            }\n            return $d.promise();\n        }\n    };\n\n    $.extend(this, publicAPI);\n};\n\nif (typeof exports !== 'undefined') {\n    module.exports = AuthService;\n}\nelse {\n    if (!root.F) { root.F = {};}\n    if (!root.F.service) { root.F.service = {};}\n    root.F.service.Auth = AuthService;\n}\n\n}).call(this);\n","/**\n * variable-api\n *\n * To be usually used in conjunction with the Run API Service, though can also be used stand-alone if paired with the right run\n *\n * @example\n *     var rs = require('service/run-api-service')\n *     var vs = require('service/variable-api-service')({runService: rs.create();})\n *\n *\n */\n\n(function(){\n var root = this;\n var F = root.F;\n\n var $, ConfigService, qutil, rutil, futil, TransportFactory;\n if  (typeof require !== 'undefined') {\n     $ = require('jquery');\n     configService = require('utils/configuration-service');\n     qutil = require('util/query-util');\n     rutil = require('util/run-util');\n     futil = require('util/promisify-util');\n\n }\n else {\n     $ = jQuery;\n     ConfigService = F.service.Config;\n     qutil = F.util.query;\n     rutil = F.util.run;\n     futil = F.util;\n\n     TransportFactory = F.factory.Transport;\n }\n\n\nvar VariablesService = function (config) {\n\n    var defaults = {\n        /**\n         * The runs object to apply the variable filters to\n         * @type {RunService}\n         */\n        runService: null\n    };\n    var serviceOptions = $.extend({}, defaults, config);\n    var urlConfig = ConfigService(serviceOptions).get('url');\n\n    var getURL = function() {\n        return serviceOptions.runService.urlConfig.getFilterURL() + 'variables/';\n    };\n\n    var httpOptions = {\n        url: getURL\n    };\n    if (serviceOptions.token) {\n        httpOptions.headers = {\n            'Authorization': 'Bearer ' + serviceOptions.token\n        };\n    }\n    var http = new TransportFactory(httpOptions);\n\n    var publicAPI = {\n\n        /**\n         * Get values for a variable\n         * @param {String} Variable to load\n         * @param {Object} filters filters & op modifiers\n         * @param {object} options Overrides for configuration options\n         * @example\n         *     vs.load('price');\n         */\n        load: function (variable, filters, options) {\n            var httpOptions = $.extend(true, {}, serviceOptions, options);\n            return http.get(filters, $.extend({}, httpOptions, {\n                url: getURL() + variable + '/'\n            }));\n        },\n\n        /**\n         * Parameters to filter the list of runs by\n         * @param {Object | Array} Query\n         * @param {Object} filters filters & op modifiers\n         * @param {object} options Overrides for configuration options\n         *\n         * @example\n         *     vs.query(['Price', 'Sales'])\n         *     vs.query({set: 'variableSet', include:['price', 'sales']});\n         *     vs.query({set: ['set1', 'set2'], include:['price', 'sales']});\n         */\n        query: function (query, filters, options) {\n            //Query and filters are both querystrings in the url; only calling them out separately here to be consistent with the other calls\n            var httpOptions = $.extend(true, {}, serviceOptions, options);\n\n            if ($.isArray(query)) {\n                query = {include: query};\n            }\n            $.extend(query, filters);\n            return http.get(query, httpOptions);\n        },\n\n        /**\n         * Save values to the api. Over-writes whatever is on there currently\n         * @param {Object|String} variable Object with attributes, or string key\n         * @param {Object} val Optional if prev parameter was a string, set value here\n         * @param {object} options Overrides for configuration options\n         *\n         * @example\n         *     vs.save({price: 4, quantity: 5, products: [2,3,4]})\n         *     vs.save('price', 4);\n         */\n        save: function (variable, val, options) {\n            var attrs;\n            if (typeof variable === 'object') {\n              attrs = variable;\n              options = val;\n            } else {\n              (attrs = {})[variable] = val;\n            }\n            var httpOptions = $.extend(true, {}, serviceOptions, options);\n\n            return http.patch.call(this, attrs, httpOptions);\n        },\n\n        // Not Available until underlying API supports PUT. Otherwise save would be PUT and merge would be PATCH\n        // *\n        //  * Save values to the api. Merges arrays, but otherwise same as save\n        //  * @param {Object|String} variable Object with attributes, or string key\n        //  * @param {Object} val Optional if prev parameter was a string, set value here\n        //  * @param {object} options Overrides for configuration options\n        //  *\n        //  * @example\n        //  *     vs.merge({price: 4, quantity: 5, products: [2,3,4]})\n        //  *     vs.merge('price', 4);\n\n        // merge: function (variable, val, options) {\n        //     var attrs;\n        //     if (typeof variable === 'object') {\n        //       attrs = variable;\n        //       options = val;\n        //     } else {\n        //       (attrs = {})[variable] = val;\n        //     }\n        //     var httpOptions = $.extend(true, {}, serviceOptions, options);\n\n        //     return http.patch.call(this, attrs, httpOptions);\n        // }\n    };\n    $.extend(this, publicAPI);\n};\n\nif (typeof exports !== 'undefined') {\n    module.exports = VariablesService;\n}\nelse {\n    if (!root.F) { root.F = {};}\n    if (!root.F.service) { root.F.service = {};}\n    root.F.service.Variables = VariablesService;\n}\n\n}).call(this);\n","/**\n *\n * ##Run API Service\n *\n * The Run API Service allows you to perform common tasks around creating and updating runs, variables, and data.\n *\n * All API calls take in an \"options\" object as the last parameter. The options can be used to extend/override the Run API Service defaults.\n * @example\n *     var rs = require('run-service')({\n *\n *     });\n *\n *\n */\n\n(function(){\nvar root = this;\nvar F = root.F;\n\nvar $, ConfigService, qutil, rutil, futil, TransportFactory, VariablesService, StorageFactory;\nif  (typeof require !== 'undefined') {\n    $ = require('jquery');\n    configService = require('util/configuration-service');\n    VariablesService = require('service/variables-api-service');\n    qutil = require('util/query-util');\n    rutil = require('util/run-util');\n    futil = require('util/promisify-util');\n    StorageFactory= require('store/store-factory');\n}\nelse {\n    $ = jQuery;\n    ConfigService = F.service.Config;\n    VariablesService = F.service.Variables;\n    qutil = F.util.query;\n    rutil = F.util.run;\n    futil = F.util;\n    TransportFactory = F.factory.Transport;\n    StorageFactory = F.factory.Store;\n}\n\nvar RunService = function (config) {\n    // config || (config = configService.get());\n    var store = new StorageFactory({synchronous: true});\n\n    var defaults = {\n        /**\n         * For functions that require authentication, pass in the user access token. If you're already logged in with a cookie set, loads from there\n         * @see [Authentication API Service](./auth-api-service.html) for getting tokens.\n         * @type {String}\n         */\n        token: store.get('epicenter.token') || '',\n\n        /**\n         * The account id. In the Epicenter UI, this is the \"Team ID\" (for team projects) or \"User ID\" (for personal projects). Defaults to empty string.\n         * @type {String}\n         */\n        account: '',\n\n        /**\n         * The project id. Defaults to empty string.\n         * @type {String}\n         */\n        project: '',\n\n        /**\n         * Criteria to filter runs by\n         * @type {String}\n         */\n        filter: '',\n\n        /** Called when the call completes successfully **/\n        success: $.noop,\n\n        /**\n         * Called when the call fails. Defaults to `$.noop`.\n         */\n        error: $.noop,\n\n        /**\n         * Called when the call completes, regardless of success or failure. Defaults to `$.noop`.\n         */\n        complete: $.noop,\n\n        /**\n         * Called at any significant point in the progress of the call, usually before and after server requests. Defaults to `$.noop`.\n         */\n        progress: $.noop,\n    };\n\n    var serviceOptions = $.extend({}, defaults, config);\n\n    var urlConfig = ConfigService(serviceOptions).get('server');\n    if (serviceOptions.account) urlConfig.accountPath = serviceOptions.account;\n    if (serviceOptions.project) urlConfig.projectPath = serviceOptions.project;\n\n    urlConfig.filter = ';';\n    urlConfig.getFilterURL = function() {\n        var url = urlConfig.getAPIPath('run');\n        var filter = qutil.toMatrixFormat(serviceOptions.filter);\n\n        if (filter) url += filter + '/';\n        return url;\n    };\n\n    var httpOptions = {\n        url: urlConfig.getFilterURL\n    };\n    if (serviceOptions.token) {\n        httpOptions.headers = {\n            'Authorization': 'Bearer ' + serviceOptions.token\n        };\n    }\n    var http = new TransportFactory(httpOptions);\n\n    var setFilterOrThrowError = function(options) {\n        if (options.filter) serviceOptions.filter = options.filter;\n        if (!serviceOptions.filter) {\n            throw new Error('No filter specified to apply operations against');\n        }\n    };\n\n    var publicAsyncAPI = {\n        urlConfig: urlConfig,\n\n        /**\n         * Create a new run.\n         *\n         *  **Example**\n         *\n         *      rs.create({\n         *          model: 'hello_world.jl'\n         *      })\n         *\n         *  **Parameters**\n         * @param {Object} `model` The name of the primary [model file](../../writing_your_model/). This is the one file in the project that explicitly exposes variables and methods, and it must be stored in the Model folder of your project.\n         * @param {Object} `options` (Optional) Overrides for configuration options.\n         *\n         */\n        create: function(params, options) {\n            var createOptions = $.extend(true, {}, serviceOptions, options, {url: urlConfig.getAPIPath('run')});\n            if (typeof params === 'string') params = {model: params};\n\n            var oldSuccess = createOptions.success;\n            createOptions.success = function(response) {\n                serviceOptions.filter = response.id; //all future chained calls to operate on this id\n                return oldSuccess.apply(this, arguments);\n            };\n\n            return http.post(params, createOptions);\n        },\n\n        /**\n         * Returns particular runs, based on conditions specified in the `qs` object.\n         *\n         * The elements of the `qs` object are ANDed together within a single call to `.query()`, but are ORed across multiple chained calls to `.query()`. See the examples.\n         *\n         * **Examples**\n         *\n         *      // returns runs with saved = true and price > 1.\n         *     rs.query({\n         *          'saved': 'true',\n         *          'price': '>1'\n         *       },\n         *       {\n         *          limit: 5,\n         *          page: 2\n         *       });\n         *\n         *      // returns runs with saved = true and price > 1;\n         *      // also returns runs with sales < 50.\n         *     rs.query({\n         *          'saved': true,\n         *          'price': '>1'\n         *       });\n         *      .query({\n         *          'sales': '<50'\n         *       });\n         *\n         * **Parameters**\n         * @param {Object} `qs` Query object. Each key can be a property of the run or the name of variable that has been saved in the run. (See [more on run persistence](../../run_persistence).) Each value can be a literal value, or a comparison operator and value. (See [more on filtering](../../aggregate_run_api/#filters) allowed in the underlying Run API.)\n         * @param {Object} `outputModifier` (Optional) Paging object. Can include `limit`, `page`, and `sort`.\n         * @param {object} `options` (Optional) Overrides for configuration options\n         */\n        query: function (qs, outputModifier, options) {\n            serviceOptions.filter = qs; //shouldn't be able to over-ride\n            var httpOptions = $.extend(true, {}, serviceOptions, options);\n            return http.get(outputModifier, httpOptions);\n        },\n\n        /**\n         * Returns particular runs, based on conditions specified in the `qs` object.\n         *\n         * Similar to `.query()`, except merges parameters instead of overwriting them when calls are chained.\n         *\n         * **Example**\n         *\n         *     rs.query({\n         *         'saved': true\n         *     })   // Get all saved runs\n         *     .filter({\n         *         '.price': '>1'\n         *     })   // Get all saved runs with price > 1\n         *     .filter({\n         *         'user.firstName': 'John'\n         *     });  // Get all saved runs with price > 1,\n         *          // and belonging to users with first name John\n         *\n         * **Parameters**\n         * @param {Object} `filter` Filter object. Each key can be a property of the run or the name of variable that has been saved in the run. (See [more on run persistence](../../run_persistence).) Each value can be a literal value, or a comparison operator and value. (See [more on filtering](../../aggregate_run_api/#filters) allowed in the underlying Run API.)\n         * @param {Object} `outputModifier` (Optional) Paging object. Can include `limit`, `page`, and `sort`.\n         * @param {object} `options` (Optional) Overrides for configuration options\n         */\n        filter: function (filter, outputModifier, options) {\n            if ($.isPlainObject(serviceOptions.filter)) {\n                $.extend(serviceOptions.filter, filter);\n            }\n            else {\n                serviceOptions.filter = filter;\n            }\n            var httpOptions = $.extend(true, {}, serviceOptions, options);\n            return http.get(outputModifier, httpOptions);\n        },\n\n        /**\n         * Get data for a specific run. This includes standard data such as the account, model, project, and created and last modified dates, as well as variables from the default variable set. To request additional variables or variable sets, pass them as part of the `filters` object.\n         *\n         * **Example**\n         *\n         *     rs.load('<runid>', {include: '.score', set: 'xyz'});\n         *\n         * **Parameters**\n         * @param {String} `runID` The run id\n         * @param {Object} `filters` (Optional) Filters & op modifiers\n         * @param {object} `options` (Optional) Overrides for configuration options\n         */\n        load: function (runID, filters, options) {\n            serviceOptions.filter = runID; //shouldn't be able to over-ride\n            var httpOptions = $.extend(true, {}, serviceOptions, options);\n            return http.get(filters, httpOptions);\n        },\n\n\n        //Saving data\n        /**\n         * Save attributes (data, variables) of the run.\n         *\n         * **Example**\n         *\n         *     rs.save({completed: true});\n         *     rs.save({saved: true, variables: {a: 23, b: 23}});\n         *     rs.save({saved: true, '.a': 23, '.b': 23}}); //equivalent to above\n         *\n         * **Parameters**\n         * @param {Object} `attributes` The run data and variables to save. Preface model variables with `.` or include them in a `variables` field within the `attributes` object.\n         * @param {object} `options` (Optional) Overrides for configuration options\n         */\n        save: function (attributes, options) {\n            var httpOptions = $.extend(true, {}, serviceOptions, options);\n            setFilterOrThrowError(httpOptions);\n            return http.patch(attributes, httpOptions);\n        },\n\n        //##Operations\n        /**\n         * Call a method from the model.\n         *\n         * The method must be exposed (e.g. `export` for a Julia model, see [Writing your Model](../../writing_your_model/)) in the model file in order to be called through the API.\n         *\n         * Note that you can combine the `operation` and `params` arguments into a single object if you prefer, as in the third example.\n         *\n         * **Example**\n         *\n         *     rs.do('solve');\n         *     rs.do('add', [1,2]);\n         *     rs.do({name:'add', arguments:[2,4]});\n         *\n         * **Parameters**\n         * @param {String} `operation` Name of method.\n         * @param {Array} `params` (Optional) Any parameters the operation takes, passed as an array.\n         * @param {object} `options` (Optional) Overrides for configuration options\n         */\n        do: function(operation, params, options) {\n            // console.log('do', operation, params);\n            var opsArgs;\n            var postOptions;\n            if (options) {\n                opsArgs = params;\n                postOptions = options;\n            }\n            else {\n                if ($.isPlainObject(params)) {\n                    opsArgs = null;\n                    postOptions = params;\n                }\n                else {\n                    opsArgs = params;\n                }\n            }\n            var result = rutil.normalizeOperations(operation, opsArgs);\n            var httpOptions = $.extend(true, {}, serviceOptions, postOptions);\n\n            setFilterOrThrowError(httpOptions);\n\n            var prms = (result.args[0].length) ? {arguments: result.args[0]} : undefined;\n            return http.post(prms, $.extend(true, {}, httpOptions, {\n                url: urlConfig.getFilterURL() + 'operations/' + result.ops[0] + '/'\n            }));\n        },\n\n        /**\n         * Call several methods from the model, sequentially.\n         *\n         * The methods must be exposed (e.g. `export` for a Julia model, see [Writing your Model](../../writing_your_model/)) in the model file in order to be called through the API.\n         *\n         * **Example**\n         *\n         *     rs.serial(['initialize', 'solve', 'reset']);\n         *     rs.serial([  {name: 'init', params: [1,2]},\n         *                  {name: 'reset', params: [2,3]} ]);\n         *\n         * **Parameters**\n         * @param {Array[string]|Array[object]} `operations` If the methods do not take parameters, pass an array of the method names. If the methods do take parameters, pass an array of objects, each of which contains a method name and its own array of arguments.\n         * @param {object} `options` (Optional) Overrides for configuration options\n         */\n        serial: function (operations, params, options) {\n            var opParams = rutil.normalizeOperations(operations, params);\n            var ops = opParams.ops;\n            var args = opParams.args;\n            var me = this;\n\n            var $d = $.Deferred();\n            var postOptions = $.extend(true, {}, serviceOptions, options);\n\n            var doSingleOp = function() {\n                var op = ops.shift();\n                var arg = args.shift();\n                me.do(op, arg, {\n                    success: function() {\n                        if (ops.length) {\n                            doSingleOp();\n                        } else {\n                            $d.resolve.apply(this, arguments);\n                            postOptions.success.apply(this, arguments);\n                        }\n                    },\n                    error: function() {\n                        $d.reject.apply(this, arguments);\n                        postOptions.error.apply(this, arguments);\n                    }\n                });\n            };\n\n            doSingleOp();\n\n            return $d.promise();\n        },\n\n        /**\n         * Call several methods from the model, executing them in parallel.\n         *\n         * The methods must be exposed (e.g. `export` for a Julia model, see [Writing your Model](../../writing_your_model/)) in the model file in order to be called through the API.\n         *\n         * **Example**\n         *\n         *     rs.parallel(['solve', 'reset']);\n         *     rs.parallel({add: [1,2], subtract: [2,4]});\n         *     rs.parallel([ {name: 'add', params: [1,2]},\n         *                   {name: 'subtract', params:[2,3]} ]);\n         *\n         * **Parameters**\n         * @param {Array|Object} `operations` If the methods do not take parameters, pass an array of the method names. If the methods do take parameters, pass an array of objects, each of which contains a method name and its own array of arguments. The `name` and `params` can be explicit or implied.\n         * @param {object} `options` (Optional) Overrides for configuration options\n         */\n        parallel: function (operations, params, options) {\n            var $d = $.Deferred();\n\n            var opParams = rutil.normalizeOperations(operations, params);\n            var ops = opParams.ops;\n            var args = opParams.args;\n            var postOptions = $.extend(true, {}, serviceOptions, options);\n\n            var queue  = [];\n            for (var i=0; i< ops.length; i++) {\n                queue.push(\n                    this.do(ops[i], args[i])\n                );\n            }\n            $.when.apply(this, queue)\n                .done(function() {\n                    $d.resolve.apply(this, arguments);\n                    postOptions.success.apply(this.arguments);\n                })\n                .fail(function() {\n                    $d.reject.apply(this, arguments);\n                    postOptions.error.apply(this.arguments);\n                });\n\n            return $d.promise();\n        }\n    };\n\n    var publicSyncAPI = {\n        /**\n         * Returns a variable object.\n         *\n         * **Parameters**\n         * @param {object} `config` (Optional) Overrides for configuration options\n         * @see [Variable API Service](./variable-api-service.html) for more information.\n         */\n\n        variables: function (config) {\n            var vs = new VariablesService($.extend({}, serviceOptions, config, {\n                runService: this\n            }));\n            return vs;\n        }\n    };\n\n    $.extend(this, publicAsyncAPI);\n    $.extend(this, publicSyncAPI);\n};\n\nif (typeof exports !== 'undefined') {\n    module.exports = RunService;\n}\nelse {\n    if (!root.F) { root.F = {};}\n    if (!root.F.service) { root.F.service = {};}\n    root.F.service.Run = RunService;\n}\n\n}).call(this);\n"]}